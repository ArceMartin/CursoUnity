using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;

public class PlayerMovement : MonoBehaviour
{
  public Rigidbody2D rbody;
  public Animator anim;

  [Header("Estadisticas")]
  public float jumpForce = 6;
  public float walkSpeed = 6;
  private float currentSpeed = 0;

  [Header("Colisiones")]
  public Vector2 abajo = new Vector2(0, -0.79f); // para conocer la posicion de los pies
  public float radioColision = 0.1f; // separacion entre el pie y el piso para la colision
  public  LayerMask layerPiso; // La capa con la que existe la colision

  [Header("Booleanos / Banderas")] 
  public bool enSuelo;
  public bool segundoSaltoDisponible;

  void Start(){}  // Se llama a Start antes de la actualizaciÃ³n del primer fotograma
  
  void Update() // Update se llama una vez por fotograma
  {
    // Actualiza velocidad horizontal
    rbody.velocity = new Vector2(currentSpeed, rbody.velocity.y);

    // Determina coordenadas de los pies y Checa si existe colision con el suelo
    Vector2 pies = (Vector2)transform.position + abajo; 
    enSuelo = Physics2D.OverlapCircle(pies, radioColision, layerPiso); 

    if (enSuelo) 
      segundoSaltoDisponible = true; // necesario para 2do salto al caer de una orilla

    // Logica para animaciones
    if (enSuelo && rbody.velocity.x != 0) 
    {
      anim.SetBool("caminar", true ); //
      anim.SetBool("saltar" , false);
      anim.SetBool("caer"   , false);
    }
    else if (enSuelo && rbody.velocity.x == 0)
    {
      anim.SetBool("caminar", false); //
      anim.SetBool("saltar" , false);
      anim.SetBool("caer"   , false);
    }
    else if (!enSuelo && rbody.velocity.y > 0)
    {
      anim.SetBool("caminar", false);
      anim.SetBool("saltar" , true ); //
      anim.SetBool("caer"   , false);
    }
    else if (!enSuelo && rbody.velocity.y < 0)
    {
      anim.SetBool("caminar", false);
      anim.SetBool("saltar" , false);
      anim.SetBool("caer"   , true ); //
    }

  }

  // Metodo OnJump se ejecuta cuando el Input Action Asset detecta el evento Jump
  // por medio de los inputs que especificamos (up, w, space)
  private void OnJump() 
  {
    if (enSuelo || segundoSaltoDisponible)
    {
      rbody.velocity = new Vector2(rbody.velocity.x, jumpForce); // Aplica fuerza del salto
      segundoSaltoDisponible = enSuelo; // limita y reestablece segundo salto
    }
  }

  // Metodo OnMove se ejecuta cuando el Input Action Asset detecta el evento Move
  // por medio de los inputs que especificamos (left, right, a, d)
  private void OnMove(InputValue inputValue) 
  {
    // Recuperamos el input izquierda o derecha -1 / 0 / 1
    float moveValue = inputValue.Get<float>();
    currentSpeed = moveValue * walkSpeed;

    // Logica para cambiar direccion del sprite
    if (moveValue * transform.localScale.x < 0) // input y direccion opuestos
      transform.localScale = new Vector2(-1 * transform.localScale.x, transform.localScale.y);

  }
}
